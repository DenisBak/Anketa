//
//  ContentView.swift
//  Anketa
//
//  Created by Edik on 30/05/24.
//

import SwiftUI
import MessageUI

struct AnketaView: View {
    private let baseMail = "edikazizyan@yandex.ru"
    @State private var fullName = ""
    @State private var dateOfBirth = ""
    @State private var phoneNumber = ""
    @State private var mail = ""
    @State private var numberOfChildrens = ""
    @State private var responsibilityForChildren = ""
    
    @State private var isWaterSlidesEnabled = false
    @State private var isIndoorPoolEnabled = false
    @State private var isChildrensAreaEnabled = false
    @State private var isFoodCourtEnabled = false
    @State private var isSpaEnabled = false
    @State private var isSerfingEnabled = false
    
    @State private var isDataProcessingEnabled = false
    @State private var isBehaviourRoolsEnabled = false
    
    @State private var isShowingMailCompose = false
    
    var body: some View {
        ZStack {
            Color.white.opacity(0.1)
                .onTapGesture {
                    UIApplication.shared.endEditing(true)
                }
            
            ScrollView {
                header
                    .padding(.top)
                    .padding(.bottom, 28)
                
                VStack(spacing: 18) {
                    TextFieldView(
                        title: "–ü–æ–ª–Ω–æ–µ –ò–º—è",
                        text: $fullName,
                        state: .string,
                        placeholder: "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è"
                    )
                    
                    TextFieldView(
                        title: "–î–∞—Ç–∞ –†–æ–∂–¥–µ–Ω–∏—è",
                        text: $dateOfBirth,
                        state: .date,
                        placeholder: "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è"
                    )
                    
                    TextFieldView(
                        title: "–ù–æ–º–µ—Ä –¢–µ–ª–µ—Ñ–æ–Ω–∞",
                        text: $phoneNumber,
                        state: .phoneNumber,
                        placeholder: "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
                    )
                    
                    TextFieldView(
                        title: "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞",
                        text: $mail,
                        state: .email,
                        placeholder: "–í–≤–µ–¥–∏—Ç–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É"
                    )
                    
                    TextFieldView(
                        title: "–ö—Ç–æ –±–µ—Ä–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é –∑–∞ —Ä–µ–±–µ–Ω–∫–∞ (–¥–µ—Ç–µ–π)",
                        text: $responsibilityForChildren,
                        state: .string,
                        placeholder: "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è"
                    )
                    
                    VStack(spacing: 12) {
                        Text("–ó–æ–Ω—ã –æ—Ç–¥—ã—Ö–∞ –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è")
                            .foregroundStyle(.white)
                            .frame(maxWidth: .infinity, alignment: .leading)
                            .padding(.leading, 4)
                        
                        toggleEmojiView(
                            value: $isWaterSlidesEnabled,
                            text: "–í–æ–¥–Ω—ã–µ –≥–æ—Ä–∫–∏",
                            image: "üõù".image()
                        )
                        .onTapGesture {
                            isWaterSlidesEnabled.toggle()
                        }
                        
                        toggleEmojiView(
                            value: $isIndoorPoolEnabled,
                            text: "–ö—Ä—ã—Ç—ã–π/–ó–∞–∫—Ä—ã—Ç—ã–π –±–∞—Å—Å–µ–π–Ω",
                            image: "üèä‚Äç‚ôÇÔ∏è".image()
                        )
                        .onTapGesture {
                            isIndoorPoolEnabled.toggle()
                        }
                        
                        toggleEmojiView(
                            value: $isChildrensAreaEnabled,
                            text: "–î–µ—Ç—Å–∫–∞—è –∑–æ–Ω–∞",
                            image: "üë∂".image()
                        )
                        .onTapGesture {
                            isChildrensAreaEnabled.toggle()
                        }
                        
                        toggleEmojiView(
                            value: $isFoodCourtEnabled,
                            text: "–§—É–¥ –∫–æ—Ä—Ç",
                            image: "üçî".image()
                        )
                        .onTapGesture {
                            isFoodCourtEnabled.toggle()
                        }
                        
                        toggleEmojiView(
                            value: $isSpaEnabled,
                            text: "–°–ø–∞",
                            image: "üßñ‚Äç‚ôÇÔ∏è".image()
                        )
                        .onTapGesture {
                            isSpaEnabled.toggle()
                        }
                        
                        toggleEmojiView(
                            value: $isSerfingEnabled,
                            text: "–°—ë—Ä—Ñ–∏–Ω–≥",
                            image: "üèÑ‚Äç‚ôÄÔ∏è".image()
                        )
                        .onTapGesture {
                            isSerfingEnabled.toggle()
                        }
                    }
                    
                    TextFieldView(
                        title: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –î–µ—Ç–µ–π",
                        text: $numberOfChildrens,
                        state: .numbers,
                        placeholder: "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π"
                    )
                    
                    toggleView(
                        value: $isBehaviourRoolsEnabled,
                        text: "–Ø –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω (–∞) —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏ –Ω–æ—Ä–º–∞–º–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –ê–∫–≤–∞–ø–∞—Ä–∫–æ–º ¬´–ú–æ—Ä—Å–∫–∞—è –∑–≤–µ–∑–¥–∞¬ª –ò –≤ —Å–ª—É—á–∞–µ —á–µ–≥–æ –ø–æ–Ω–µ—Å—É –ø–æ–ª–Ω—É—é –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ-–ø—Ä–∞–≤–æ–≤—É—é, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é, —É–≥–æ–ª–æ–≤–Ω—É—é –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—É—é –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å."
                    )
                    .onTapGesture {
                        isBehaviourRoolsEnabled.toggle()
                    }
                    
                    toggleView(
                        value: $isDataProcessingEnabled,
                        text: "–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
                    )
                    .onTapGesture {
                        isDataProcessingEnabled.toggle()
                    }
                    
                    Button(action: {
                        if canUserSendData(), MFMailComposeViewController.canSendMail() {
                            isShowingMailCompose = true
                        }
                    }, label: {
                        Text("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ê–Ω–∫–µ—Ç—É")
                            .foregroundStyle(.white)
                            .frame(maxWidth: .infinity)
                            .frame(height: 58)
                            .background(.blue)
                            .cornerRadius(16)
                    })
                    .padding(.bottom, 40)
                    .padding(.top, 20)
                }
                .padding(.horizontal, 16)
            }
        }
        .frame(maxWidth: .infinity, maxHeight: .infinity)
        .ignoresSafeArea()
        .sheet(isPresented: $isShowingMailCompose) {
            MailComposeView(
                isPresented: $isShowingMailCompose,
                recipients: [baseMail],
                subject: fullName,
                body: configureMessageBody()
            )
        }
    }
}

extension AnketaView {
    @ViewBuilder private var header: some View {
        Text("–ê–Ω–∫–µ—Ç–∞ –ê–∫–≤–∞–ø–∞—Ä–∫–∞")
            .font(.title2)
            .foregroundStyle(.white)
            .padding(.top, 52)
    }
    
    @ViewBuilder private func toggleEmojiView(value: Binding<Bool>, text: String, image: UIImage?) -> some View {
        if let image {
            HStack(spacing: 12) {
                if value.wrappedValue {
                    Image(uiImage: image)
                        .resizable()
                        .frame(width: 18, height: 18)
                        .overlay(
                            RoundedRectangle(cornerRadius: 4)
                                .stroke(.blue, lineWidth: 1)
                        )
                } else {
                    RoundedRectangle(cornerRadius: 4)
                        .stroke(.blue, lineWidth: 1)
                        .frame(width: 18, height: 18)
                }
                
                Text(text)
                    .font(.subheadline)
                    .foregroundStyle(.white)
            }
            .frame(maxWidth: .infinity, alignment: .leading)
            .padding(.leading)
        }
    }
    
    @ViewBuilder private func toggleView(value: Binding<Bool>, text: String) -> some View {
        if let image = "‚úÖ".image() {
            HStack(spacing: 12) {
                if value.wrappedValue {
                    Image(uiImage: image)
                        .resizable()
                        .scaledToFit()
                        .frame(width: 18, height: 18)
                        .overlay(
                            RoundedRectangle(cornerRadius: 4)
                                .stroke(.blue, lineWidth: 1)
                        )
                } else {
                    RoundedRectangle(cornerRadius: 4)
                        .stroke(.blue, lineWidth: 1)
                        .frame(width: 18, height: 18)
                }
                
                Text(text)
                    .font(.subheadline)
                    .foregroundStyle(.white)
            }
            .frame(maxWidth: .infinity, alignment: .leading)
            .padding(.leading)
        }
    }
    
    private func configureMessageBody() -> String {
        return """
            –ü–æ–ª–Ω–æ–µ –∏–º—è: \(fullName)
            –î–∞—Ç–∞ –†–æ–∂–¥–µ–Ω–∏—è: \(dateOfBirth)
            –ù–æ–º–µ—Ä –¢–µ–ª–µ—Ñ–æ–Ω–∞: \(phoneNumber)
            –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ü–æ—á—Ç–∞: \(mail)
            –ö—Ç–æ –Ω–µ—Å—ë—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –¥–µ—Ç–µ–π: \(responsibilityForChildren)
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –î–µ—Ç–µ–π: \(numberOfChildrens)
        
            –ó–æ–Ω—ã –û—Ç–¥—ã—Ö–∞:
            –í–æ–¥–Ω—ã–µ –ì–æ—Ä–∫–∏: \(boolToFormattedString(isWaterSlidesEnabled))
            –ö—Ä—ã—Ç—ã–π –±–∞—Å—Å–µ–π–Ω: \(boolToFormattedString(isIndoorPoolEnabled))
            –î–µ—Ç—Å–∫–∞—è –ó–æ–Ω–∞: \(boolToFormattedString(isChildrensAreaEnabled))
            –§—É–¥ –∫–æ—Ä—Ç: \(boolToFormattedString(isFoodCourtEnabled))
            –°–ø–∞: \(boolToFormattedString(isSpaEnabled))
            –°—ë—Ä—Ñ–∏–Ω–≥: \(boolToFormattedString(isSerfingEnabled))
        """
    }
    
    private func boolToFormattedString(_ value: Bool) -> String {
        return value ? "–ê–∫—Ç–∏–≤–Ω–æ" : "–ù–µ–∞–∫—Ç–∏–≤–Ω–æ"
    }
    
    private func canUserSendData() -> Bool {
        guard
            !fullName.isEmpty,
            !dateOfBirth.isEmpty,
            !phoneNumber.isEmpty,
            !mail.isEmpty,
            !numberOfChildrens.isEmpty,
            !responsibilityForChildren.isEmpty,
            isDataProcessingEnabled,
            isBehaviourRoolsEnabled
        else {
            return false
        }
            
        return true
    }
}

#Preview {
    AnketaView()
        .background(Color.black)
}
